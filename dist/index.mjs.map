{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import {\r\n\tipcMain,\r\n\tipcRenderer,\r\n\tIpcRendererEvent,\r\n\tIpcMainInvokeEvent,\r\n\tBrowserWindow\r\n} from 'electron'\r\n\r\n/** render process send message to main process  */\r\nconst renderToMain = <T = any>(channel: string, args: any[]) => {\r\n\treturn ipcRenderer.invoke(channel, args) as Promise<T>\r\n}\r\n\r\n/** main process receive message from render process  */\r\nconst mainFromRender = <T = any[]>(\r\n\tchannel: string,\r\n\tlistener: (event: IpcMainInvokeEvent, args: T) => any\r\n) => {\r\n\treturn ipcMain.handle(channel, listener)\r\n}\r\n\r\n/** main process send message to render process  */\r\nconst mainToRender = <T = any[]>(channel: string, args: any[]) => {\r\n\twindowList.forEach(w => w.webContents.send(channel, args))\r\n\treturn new Promise<T>(resolve => {\r\n\t\tipcMain.on('bi-directional', (e, args) => {\r\n\t\t\tresolve(args)\r\n\t\t})\r\n\t})\r\n}\r\n\r\n/**\r\n * render process receive message from main process\r\n * @param channel - The name of the event.\r\n * @param listener - The callback function\r\n */\r\nconst renderFromMain = <T = any[]>(\r\n\tchannel: string,\r\n\tlistener: (event: IpcRendererEvent, args: T) => void\r\n) => {\r\n\tipcRenderer.on(channel, (e, args) => {\r\n\t\tipcRenderer.send('bi-directional', listener(e, args))\r\n\t})\r\n}\r\n\r\n// use to have the main process send message to render process\r\nconst windowList: BrowserWindow[] = []\r\n\r\nfunction isBrowserWindow(v: unknown): v is BrowserWindow {\r\n\treturn Object.prototype.toString.call(v) === '[object Object]'\r\n}\r\n\r\nfunction isBrowserWindowArray(v: unknown): v is BrowserWindow[] {\r\n\treturn Object.prototype.toString.call(v) === '[object Array]'\r\n}\r\n\r\n/**\r\n * add window to communication channel\r\n * @public\r\n *\r\n * @param window - The window that needs to communicate\r\n *\r\n * @example\r\n *\r\n * ```typescript\r\n * import { app, BrowserWindow, Menu, ipcMain } from \"electron\";\r\n * import path from \"path\";\r\n * import ipc from \"savage-electron-ipc\";\r\n *\r\n * function createWindow() {\r\n *   const mainWindow = new BrowserWindow({\r\n *     webPreferences: {\r\n *       preload: path.join(__dirname, \"preload.ts\"),\r\n *       // This option needs to be enable, otherwise preload cannot access the node module\r\n *       nodeIntegration: true,\r\n *     },\r\n *   });\r\n *\r\n *   // Add windows that need to communicate, this step is very important\r\n *   ipc.addToChannel(mainWindow);\r\n *\r\n *   ipc\r\n *     .send<string>(\"msg\", \"hello\")\r\n *     .then((res) => {\r\n *       console.log(res);\r\n *     })\r\n *     .catch((err) => {\r\n *       console.log(err);\r\n *     });\r\n *   mainWindow.loadFile(\"index.html\");\r\n * }\r\n * // ...\r\n * ```\r\n *\r\n */\r\nexport function addToChannel(window: BrowserWindow | BrowserWindow[]) {\r\n\tif (isBrowserWindow(window)) windowList.push(window)\r\n\tif (isBrowserWindowArray(window)) windowList.push(...window)\r\n}\r\n\r\n/**\r\n * render process receive message from main process\r\n * @public\r\n *\r\n * @param channel - The name of the event.\r\n * @param args - What you want to send\r\n *\r\n * @example\r\n *\r\n * ```typescript\r\n * ipc.receive(\"msg\", (e, v) => {\r\n *   console.log(v); // 'hello'\r\n *   return \"how dare you!\";\r\n * });\r\n * ```\r\n */\r\nexport function send<T = any>(channel: string, ...args: any[]) {\r\n\tlet p = new Promise<T>(() => null)\r\n\r\n\tif (ipcMain) p = mainToRender(channel, args)\r\n\tif (ipcRenderer) {\r\n\t\tp = renderToMain(channel, args)\r\n\t\trenderToMain('forward', [channel, args])\r\n\t}\r\n\treturn p\r\n}\r\n\r\n/**\r\n * render process receive message from main process\r\n *\r\n * @public\r\n * @param channel - The name of the event.\r\n * @param listener - The callback function\r\n */\r\nexport function receive<T = any[]>(\r\n\tchannel: string,\r\n\tlistener: (event: IpcMainInvokeEvent | IpcRendererEvent, args: T) => any\r\n) {\r\n\tif (ipcMain) mainFromRender(channel, listener)\r\n\tif (ipcRenderer) renderFromMain(channel, listener)\r\n}\r\n\r\n// proxy forward message from render process to render process\r\nreceive<[string, any]>('forward', (e, args) => mainToRender(args[0], args[1]))\r\n"],"names":[],"mappings":"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"}